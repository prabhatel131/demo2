/*******************************************************************************/
/*  This file is auto-generated by Azure RTOS GUIX Studio. Do not edit this    */
/*  file by hand. Modifications to this file should only be made by running    */
/*  the Azure RTOS GUIX Studio application and re-generating the application   */
/*  specification file(s). For more information please refer to the Azure RTOS */
/*  GUIX Studio User Guide, or visit our web site at azure.com/rtos            */
/*                                                                             */
/*  GUIX Studio Revision 6.2.0.2                                               */
/*  Date (dd.mm.yyyy): 27. 2.2023   Time (hh:mm): 12:03                        */
/*******************************************************************************/


#ifndef _DEMO2_SPECIFICATIONS_H_
#define _DEMO2_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define ALARM_SCREEN_NEW 1
#define ALARM_SCREEN_REMP 2
#define CLOSE_BUTTON_SCREEN 3
#define ALARM_SCREEN_TEMP 4
#define CLOCK_BUTTON 5
#define SCREEN_SETTING_BUTTON 6
#define DISPLAY_SETTING_BUTTON 7
#define ALARAM_SCREEN_WAL 8
#define LOCK_SCREEN_SETTING 9
#define HOME_SCREEN_SETTING 10
#define TRENDS_BUTTON 11
#define TIMER_SCREEN 12
#define WORLD_CLOCK_SCREEN 13
#define ALARM_SCREEN 14
#define DISPLAY_SETTING 15
#define CLOSE_BUTTON 16
#define SCREEN_SETTING 17
#define HOME_SCREEN_SETTING_BUTTON 18
#define LOCK_SCREEN_SETTING_BUTTON 19
#define CLOCK_SCREEN 20
#define ALARM_BUTTON 21
#define WORLD_CLOCK_BUTTON 22
#define TIMER_BUTTON 23
#define MAIN_MENU 24


/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT

#define GX_ACTION_FLAG_DYNAMIC_TARGET 0x01
#define GX_ACTION_FLAG_DYNAMIC_PARENT 0x02
#define GX_ACTION_FLAG_POP_TARGET     0x04
#define GX_ACTION_FLAG_POP_PARENT     0x08

typedef struct GX_STUDIO_ACTION_STRUCT
{
    GX_UBYTE opcode;
    GX_UBYTE flags;
    GX_CONST VOID *parent;
    GX_CONST VOID *target;
    GX_CONST GX_ANIMATION_INFO  *animation;
} GX_STUDIO_ACTION;

typedef struct GX_STUDIO_EVENT_ENTRY_STRUCT
{
    ULONG event_type;
    USHORT event_sender;
    GX_CONST GX_STUDIO_ACTION *action_list;
} GX_STUDIO_EVENT_ENTRY;

typedef struct GX_STUDIO_EVENT_PROCESS_STRUCT 
{
    GX_CONST GX_STUDIO_EVENT_ENTRY *event_table;
    UINT (*chain_event_handler)(GX_WIDGET *, GX_EVENT *);
} GX_STUDIO_EVENT_PROCESS;

/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   GX_RESOURCE_ID disabled_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID pixelmap_id;
} GX_ICON_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
    GX_RESOURCE_ID disabled_pixelmap_id;
} GX_PIXELMAP_BUTTON_PROPERTIES;

typedef struct
{
    int min_val;
    int max_val;
    int current_val;
    int increment;
    GX_VALUE min_travel;
    GX_VALUE max_travel;
    GX_VALUE needle_width;
    GX_VALUE needle_height;
    GX_VALUE needle_inset;
    GX_VALUE needle_hotspot;
    GX_RESOURCE_ID lower_pixelmap;
    GX_RESOURCE_ID upper_pixelmap;
    GX_RESOURCE_ID needle_pixelmap;
} GX_PIXELMAP_SLIDER_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_RESOURCE_ID left_map_id;
    GX_RESOURCE_ID fill_map_id;
    GX_RESOURCE_ID right_map_id;
    GX_RESOURCE_ID selected_left_map_id;
    GX_RESOURCE_ID selected_fill_map_id;
    GX_RESOURCE_ID selected_right_map_id;
} GX_PIXELMAP_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_UBYTE       whitespace;
    GX_BYTE        line_space;
} GX_ML_TEXT_VIEW_PROPERTIES;

typedef struct
{
   GX_CONST GX_STUDIO_WIDGET *base_info;
   UINT (*base_create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   GX_RECTANGLE size;
} GX_TEMPLATE_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct ALARM_SCREEN_TEMP_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW alarm_screen_temp_window_3;
    GX_PIXELMAP_PROMPT alarm_screen_temp_prompt_16;
    GX_WINDOW alarm_screen_temp_window_1;
    GX_PIXELMAP_BUTTON alarm_screen_temp_clock_button;
    GX_PROMPT alarm_screen_temp_prompt_1;
    GX_PIXELMAP_BUTTON alarm_screen_temp_screen_setting_button;
    GX_MULTI_LINE_TEXT_VIEW alarm_screen_temp_text_view_2;
    GX_PIXELMAP_BUTTON alarm_screen_temp_display_setting_button;
    GX_PROMPT alarm_screen_temp_prompt_3;
    GX_MULTI_LINE_TEXT_VIEW alarm_screen_temp_text_view;
} ALARM_SCREEN_TEMP_CONTROL_BLOCK;

typedef struct ALARAM_SCREEN_WAL_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW alaram_screen_wal_window_2;
    GX_PIXELMAP_BUTTON alaram_screen_wal_alaram_button_1;
    GX_PROMPT alaram_screen_wal_prompt_8;
    GX_PIXELMAP_BUTTON alaram_screen_wal_alaram_button_2;
    GX_MULTI_LINE_TEXT_VIEW alaram_screen_wal_text_view_4;
    GX_PIXELMAP_BUTTON alaram_screen_wal_sensors_button_1;
    GX_PROMPT alaram_screen_wal_prompt_10_1;
    GX_PIXELMAP_BUTTON alaram_screen_wal_close_button_screen_1;
    GX_PROMPT alaram_screen_wal_prompt_11_1;
} ALARAM_SCREEN_WAL_CONTROL_BLOCK;

typedef struct LOCK_SCREEN_SETTING_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW lock_screen_setting_window;
    GX_PIXELMAP_BUTTON lock_screen_setting_trends_button_1;
    GX_MULTI_LINE_TEXT_VIEW lock_screen_setting_text_view;
    GX_PIXELMAP_BUTTON lock_screen_setting_trends_button_2;
    GX_MULTI_LINE_TEXT_VIEW lock_screen_setting_text_view_1;
    GX_PIXELMAP_BUTTON lock_screen_setting_close_button_screen;
    GX_PROMPT lock_screen_setting_prompt;
    GX_PIXELMAP_PROMPT lock_screen_setting_prompt_6;
    GX_WINDOW lock_screen_setting_window_1;
    GX_PIXELMAP_BUTTON lock_screen_setting_clock_button;
    GX_PROMPT lock_screen_setting_prompt_1;
    GX_PIXELMAP_BUTTON lock_screen_setting_screen_setting_button;
    GX_MULTI_LINE_TEXT_VIEW lock_screen_setting_text_view_2;
    GX_PIXELMAP_BUTTON lock_screen_setting_display_setting_button;
    GX_PROMPT lock_screen_setting_prompt_3;
    GX_MULTI_LINE_TEXT_VIEW lock_screen_setting_text_view_3;
} LOCK_SCREEN_SETTING_CONTROL_BLOCK;

typedef struct HOME_SCREEN_SETTING_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW home_screen_setting_window;
    GX_PIXELMAP_BUTTON home_screen_setting_home_screen_layout;
    GX_MULTI_LINE_TEXT_VIEW home_screen_setting_text_view;
    GX_PIXELMAP_BUTTON home_screen_setting_trends_button_2;
    GX_MULTI_LINE_TEXT_VIEW home_screen_setting_text_view_1;
    GX_PIXELMAP_BUTTON home_screen_setting_close_button_screen;
    GX_PROMPT home_screen_setting_prompt;
    GX_PIXELMAP_PROMPT home_screen_setting_prompt_6;
    GX_WINDOW home_screen_setting_window_1;
    GX_PIXELMAP_BUTTON home_screen_setting_clock_button;
    GX_PROMPT home_screen_setting_prompt_1;
    GX_PIXELMAP_BUTTON home_screen_setting_screen_setting_button;
    GX_MULTI_LINE_TEXT_VIEW home_screen_setting_text_view_2;
    GX_PIXELMAP_BUTTON home_screen_setting_display_setting_button;
    GX_PROMPT home_screen_setting_prompt_3;
    GX_MULTI_LINE_TEXT_VIEW home_screen_setting_text_view_3;
} HOME_SCREEN_SETTING_CONTROL_BLOCK;

typedef struct TIMER_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW timer_screen_window_3;
    GX_PIXELMAP_BUTTON timer_screen_sensors_button_2;
    GX_PROMPT timer_screen_prompt_10;
    GX_PIXELMAP_BUTTON timer_screen_close_button_screen;
    GX_PROMPT timer_screen_prompt_11;
    GX_PIXELMAP_PROMPT timer_screen_prompt_16;
    GX_WINDOW timer_screen_window_1;
    GX_PIXELMAP_BUTTON timer_screen_clock_button;
    GX_PROMPT timer_screen_prompt_1;
    GX_PIXELMAP_BUTTON timer_screen_screen_setting_button;
    GX_MULTI_LINE_TEXT_VIEW timer_screen_text_view_2;
    GX_PIXELMAP_BUTTON timer_screen_display_setting_button;
    GX_PROMPT timer_screen_prompt_3;
    GX_MULTI_LINE_TEXT_VIEW timer_screen_text_view;
} TIMER_SCREEN_CONTROL_BLOCK;

typedef struct WORLD_CLOCK_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW world_clock_screen_window_3;
    GX_PIXELMAP_BUTTON world_clock_screen_alaram_button_3;
    GX_PROMPT world_clock_screen_prompt_9;
    GX_PIXELMAP_BUTTON world_clock_screen_alaram_button_4;
    GX_MULTI_LINE_TEXT_VIEW world_clock_screen_text_view_1;
    GX_PIXELMAP_BUTTON world_clock_screen_sensors_button_2;
    GX_PROMPT world_clock_screen_prompt_10;
    GX_PIXELMAP_BUTTON world_clock_screen_close_button_screen;
    GX_PROMPT world_clock_screen_prompt_11;
    GX_PIXELMAP_PROMPT world_clock_screen_prompt_16;
    GX_WINDOW world_clock_screen_window_1;
    GX_PIXELMAP_BUTTON world_clock_screen_clock_button;
    GX_PROMPT world_clock_screen_prompt_1;
    GX_PIXELMAP_BUTTON world_clock_screen_screen_setting_button;
    GX_MULTI_LINE_TEXT_VIEW world_clock_screen_text_view_2;
    GX_PIXELMAP_BUTTON world_clock_screen_display_setting_button;
    GX_PROMPT world_clock_screen_prompt_3;
    GX_MULTI_LINE_TEXT_VIEW world_clock_screen_text_view;
} WORLD_CLOCK_SCREEN_CONTROL_BLOCK;

typedef struct ALARM_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW alarm_screen_window_3;
    GX_PIXELMAP_BUTTON alarm_screen_alaram_button;
    GX_PROMPT alarm_screen_prompt_9;
    GX_PIXELMAP_BUTTON alarm_screen_alaram_button_4;
    GX_MULTI_LINE_TEXT_VIEW alarm_screen_text_view_1;
    GX_PIXELMAP_BUTTON alarm_screen_sensors_button;
    GX_PROMPT alarm_screen_prompt_10;
    GX_PIXELMAP_BUTTON alarm_screen_close_button_screen;
    GX_PROMPT alarm_screen_prompt_11;
    GX_PIXELMAP_PROMPT alarm_screen_prompt_16;
    GX_WINDOW alarm_screen_window_1;
    GX_PIXELMAP_BUTTON alarm_screen_clock_button;
    GX_PROMPT alarm_screen_prompt_1;
    GX_PIXELMAP_BUTTON alarm_screen_screen_setting_button;
    GX_MULTI_LINE_TEXT_VIEW alarm_screen_text_view_2;
    GX_PIXELMAP_BUTTON alarm_screen_display_setting_button;
    GX_PROMPT alarm_screen_prompt_3;
    GX_MULTI_LINE_TEXT_VIEW alarm_screen_text_view;
} ALARM_SCREEN_CONTROL_BLOCK;

typedef struct DISPLAY_SETTING_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW display_setting_window;
    GX_WINDOW display_setting_window_15;
    GX_BUTTON display_setting_button;
    GX_ICON_BUTTON display_setting_icon_button_10_4;
    GX_MULTI_LINE_TEXT_VIEW display_setting_text_view_11_11_6;
    GX_BUTTON display_setting_button_1;
    GX_ICON_BUTTON display_setting_icon_button_10_5;
    GX_MULTI_LINE_TEXT_VIEW display_setting_text_view_11_11_8;
    GX_PROMPT display_setting_prompt_4;
    GX_PROMPT display_setting_prompt_2;
    GX_PIXELMAP_SLIDER display_setting_pixelmap_slider;
    GX_PIXELMAP_BUTTON display_setting_close_button;
    GX_PROMPT display_setting_prompt_5;
    GX_PIXELMAP_PROMPT display_setting_prompt;
    GX_WINDOW display_setting_window_1;
    GX_PIXELMAP_BUTTON display_setting_clock_button;
    GX_PROMPT display_setting_prompt_1;
    GX_PIXELMAP_BUTTON display_setting_screen_setting_button;
    GX_MULTI_LINE_TEXT_VIEW display_setting_text_view_2;
    GX_PIXELMAP_BUTTON display_setting_display_setting_button;
    GX_PROMPT display_setting_prompt_3;
    GX_MULTI_LINE_TEXT_VIEW display_setting_text_view;
} DISPLAY_SETTING_CONTROL_BLOCK;

typedef struct SCREEN_SETTING_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW screen_setting_window;
    GX_PIXELMAP_BUTTON screen_setting_home_screen_setting_button;
    GX_MULTI_LINE_TEXT_VIEW screen_setting_text_view;
    GX_PIXELMAP_BUTTON screen_setting_lock_screen_setting_button;
    GX_MULTI_LINE_TEXT_VIEW screen_setting_text_view_1;
    GX_PIXELMAP_BUTTON screen_setting_close_button;
    GX_PROMPT screen_setting_prompt_5;
    GX_PIXELMAP_PROMPT screen_setting_prompt_6;
    GX_WINDOW screen_setting_window_1;
    GX_PIXELMAP_BUTTON screen_setting_clock_button;
    GX_PROMPT screen_setting_prompt_1;
    GX_PIXELMAP_BUTTON screen_setting_screen_setting_button;
    GX_MULTI_LINE_TEXT_VIEW screen_setting_text_view_2;
    GX_PIXELMAP_BUTTON screen_setting_display_setting_button;
    GX_PROMPT screen_setting_prompt_3;
    GX_MULTI_LINE_TEXT_VIEW screen_setting_text_view_3;
} SCREEN_SETTING_CONTROL_BLOCK;

typedef struct CLOCK_SCREEN_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW clock_screen_window;
    GX_PIXELMAP_BUTTON clock_screen_alarm_button;
    GX_PROMPT clock_screen_prompt;
    GX_PIXELMAP_BUTTON clock_screen_world_clock_button;
    GX_MULTI_LINE_TEXT_VIEW clock_screen_text_view;
    GX_PIXELMAP_BUTTON clock_screen_timer_button;
    GX_PROMPT clock_screen_prompt_7;
    GX_PIXELMAP_BUTTON clock_screen_close_button;
    GX_PROMPT clock_screen_prompt_5;
    GX_PIXELMAP_PROMPT clock_screen_prompt_2;
    GX_WINDOW clock_screen_window_1;
    GX_PIXELMAP_BUTTON clock_screen_clock_button;
    GX_PROMPT clock_screen_prompt_1;
    GX_PIXELMAP_BUTTON clock_screen_screen_setting_button;
    GX_MULTI_LINE_TEXT_VIEW clock_screen_text_view_2;
    GX_PIXELMAP_BUTTON clock_screen_display_setting_button;
    GX_PROMPT clock_screen_prompt_3;
    GX_MULTI_LINE_TEXT_VIEW clock_screen_text_view_1;
} CLOCK_SCREEN_CONTROL_BLOCK;

typedef struct MAIN_MENU_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_WINDOW main_menu_window;
    GX_PIXELMAP_PROMPT main_menu_prompt;
    GX_WINDOW main_menu_window_1;
    GX_PIXELMAP_BUTTON main_menu_clock_button;
    GX_PROMPT main_menu_prompt_1;
    GX_PIXELMAP_BUTTON main_menu_screen_setting_button;
    GX_MULTI_LINE_TEXT_VIEW main_menu_text_view_2;
    GX_PIXELMAP_BUTTON main_menu_display_setting_button;
    GX_PROMPT main_menu_prompt_3;
    GX_MULTI_LINE_TEXT_VIEW main_menu_text_view;
} MAIN_MENU_CONTROL_BLOCK;

typedef struct ALARM_SCREEN_NEW_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    ALARM_SCREEN_TEMP_CONTROL_BLOCK alarm_screen_new_derived;
    GX_PIXELMAP_BUTTON alarm_screen_new_alaram_button;
    GX_PROMPT alarm_screen_new_prompt_9;
    GX_PIXELMAP_BUTTON alarm_screen_new_alaram_button_4;
    GX_MULTI_LINE_TEXT_VIEW alarm_screen_new_text_view_1;
    GX_PIXELMAP_BUTTON alarm_screen_new_sensors_button;
    GX_PROMPT alarm_screen_new_prompt_10;
    GX_PIXELMAP_BUTTON alarm_screen_new_close_button_screen;
    GX_PROMPT alarm_screen_new_prompt_11;
} ALARM_SCREEN_NEW_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern ALARM_SCREEN_NEW_CONTROL_BLOCK alarm_screen_new;
extern ALARM_SCREEN_TEMP_CONTROL_BLOCK alarm_screen_temp;
extern ALARAM_SCREEN_WAL_CONTROL_BLOCK alaram_screen_wal;
extern LOCK_SCREEN_SETTING_CONTROL_BLOCK lock_screen_setting;
extern HOME_SCREEN_SETTING_CONTROL_BLOCK home_screen_setting;
extern TIMER_SCREEN_CONTROL_BLOCK timer_screen;
extern WORLD_CLOCK_SCREEN_CONTROL_BLOCK world_clock_screen;
extern ALARM_SCREEN_CONTROL_BLOCK alarm_screen;
extern DISPLAY_SETTING_CONTROL_BLOCK display_setting;
extern SCREEN_SETTING_CONTROL_BLOCK screen_setting;
extern CLOCK_SCREEN_CONTROL_BLOCK clock_screen;
extern MAIN_MENU_CONTROL_BLOCK main_menu;
#endif

/* Declare event process functions, draw functions, and callback functions     */


/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_STRING **language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
    USHORT     rotation_angle;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_slider_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_pixelmap_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_multi_line_text_view_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_template_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), GX_UBYTE language, USHORT theme, GX_WINDOW_ROOT **return_root);
UINT gx_studio_auto_event_handler(GX_WIDGET *widget, GX_EVENT *event_ptr, GX_CONST GX_STUDIO_EVENT_PROCESS *record);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
